<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MessagePackCompiler.CodeAnalysis" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace <#= Namespace #>
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;
<#
var list = new List<ValueTuple<MemberSerializationInfo, byte[]>>();
foreach (var objInfo in ObjectSerializationInfos)
{
    list.Clear();
    foreach (var member in objInfo.Members)
    {
        var binary = EmbedStringHelper.Utf8.GetBytes(member.StringKey);
        list.Add(new ValueTuple<MemberSerializationInfo, byte[]>(member, binary));
    }

    string formatterName = objInfo.Name + (objInfo.IsOpenGenericType ? $"Formatter<{string.Join(", ", objInfo.GenericTypeParameters.Select(x => x.Name))}>" : "Formatter");
    bool isFormatterResolverNecessary = ShouldUseFormatterResolverHelper.ShouldUseFormatterResolver(objInfo.Members);
#>

    public sealed class <#= formatterName #> : global::MessagePack.Formatters.IMessagePackFormatter<<#= objInfo.FullName #>>
<# foreach (var typeArg in objInfo.GenericTypeParameters.Where(x => x.HasConstraints)) {#>
        where <#= typeArg.Name #> : <#= typeArg.Constraints #>
<# }#>
    {
<#
    foreach (var memberAndBinary in list)
    {
        var member = memberAndBinary.Item1;
        var binary = memberAndBinary.Item2;
#>
        // <#= member.StringKey #>
        private static global::System.ReadOnlySpan<byte> GetSpan_<#= member.Name #>() => <#= EmbedStringHelper.ToByteArrayString(binary) #>;
<#
    }
#>

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, <#= objInfo.FullName #> value, global::MessagePack.MessagePackSerializerOptions options)
        {
<#
    if (objInfo.IsClass)
    {
#>
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

<#
    }

    if (isFormatterResolverNecessary)
    {
#>
            IFormatterResolver formatterResolver = options.Resolver;
<#
    }

    if (objInfo.HasIMessagePackSerializationCallbackReceiver)
    {
        if (objInfo.NeedsCastOnBefore)
        {
#>
            ((global::MessagePack.IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
<#
        }
        else
        {
#>
            value.OnBeforeSerialize();
<#
        }
    }
#>
            writer.WriteMapHeader(<#= list.Count #>);
<#
    foreach (var memberAndBinary in list)
    {
        var member = memberAndBinary.Item1;
#>
            writer.WriteRaw(GetSpan_<#= member.Name #>());
            <#= member.GetSerializeMethodString() #>;
<#
    }
#>
        }

        public <#= objInfo.FullName #> Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
<#
    if (objInfo.IsClass)
    {
#>
                return null;
<#
    }
    else
    {
#>
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
<#
    }
#>
            }

<#
    if (objInfo.Members.Length == 0)
    {
#>
            reader.Skip();
            var ____result = new <#= objInfo.GetConstructorString() #>;
<#
    }
    else
    {
#>
            options.Security.DepthStep(ref reader);
<#
        if (isFormatterResolverNecessary)
        {
#>
            IFormatterResolver formatterResolver = options.Resolver;
<#
        }
#>
            var length = reader.ReadMapHeader();
<#
        foreach (var memberInfo in objInfo.Members)
        {
#>
            var __<#= memberInfo.Name #>__ = default(<#= memberInfo.Type #>);
<#
        }
#>

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
<#= StringKeyFormatterDeserializeHelper.Classify(objInfo.Members, "                    ") #>
                }
            }

            var ____result = new <#= objInfo.GetConstructorString() #>
            {
<#
        // Preparation for C#9 Record class
        foreach (var member in objInfo.Members.Where(x => x.IsWritable))
        {
#>
                <#= member.Name #> = __<#= member.Name #>__,
<#
        }
#>
            };

<#
    }

    if (objInfo.HasIMessagePackSerializationCallbackReceiver)
    {
        if (objInfo.NeedsCastOnAfter)
        {
#>
            ((global::MessagePack.IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
<#
        }
        else
        {
#>
            ____result.OnAfterDeserialize();
<#
        }
    }

    if (objInfo.Members.Length != 0)
    {
#>
            reader.Depth--;
<#
    }
#>
            return ____result;
        }
    }
<#
}
#>
}
