<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="MessagePackCompiler.CodeAnalysis" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace <#= Namespace #>
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

<#
foreach(var objInfo in ObjectSerializationInfos)
{
    string formatterName = objInfo.Name + (objInfo.IsOpenGenericType ? $"Formatter<{string.Join(",", objInfo.GenericTypeParameters)}>" : "Formatter");
    bool isFormatterResolverNecessary = ShouldUseFormatterResolverHelper.ShouldUseFormatterResolver(objInfo.Members);
#>
    public sealed class <#= formatterName #> : global::MessagePack.Formatters.IMessagePackFormatter<<#= objInfo.FullName #>>
    {
        public void Serialize(ref MessagePackWriter writer, <#= objInfo.FullName #> value, global::MessagePack.MessagePackSerializerOptions options)
        {
<#
    if( objInfo.IsClass)
    {#>
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

<#
    }

    if (isFormatterResolverNecessary)
    {#>
            var formatterResolver = options.Resolver;
<#
    }

    if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnBefore)
    {#>
            ((IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
<#  }
  else if(objInfo.HasIMessagePackSerializationCallbackReceiver)
  {#>
            value.OnBeforeSerialize();
<#  }#>
            writer.WriteMapHeader(<#= objInfo.WriteCount #>);
<#
    for (var i = 0; i < objInfo.Members.Length; i++)
    {
        var member = objInfo.Members[i];
        var rawBytes = EmbedStringHelper.GetEncodedStringBytes(member.StringKey);#>
            // <#= member.StringKey #>
            writer.WriteRaw((ReadOnlySpan<byte>)new byte[] { <#= rawBytes[0] #><#
        for (var j = 1; j < rawBytes.Length; j++)
        {
            #>, <#= rawBytes[j] #><#
        }
            #> });
            <#= member.GetSerializeMethodString() #>;
<#
    }#>
        }

        public <#= objInfo.FullName #> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
<#
    if (objInfo.IsClass)
    {#>
                return null;
<#    }
    else
    {#>
                throw new InvalidOperationException("typecode is null, struct not supported");
<#    }#>
            }

            options.Security.DepthStep(ref reader);
<#
    if (isFormatterResolverNecessary)
    {
#>
            var formatterResolver = options.Resolver;
<#
    }

    foreach(var memberInfo in objInfo.Members)
    {#>
            var __<#= memberInfo.Name #>__ = default(<#= memberInfo.Type #>);
<#
    }

    const string indent = "                    ";#>

            for (int i = 0, length = reader.ReadMapHeader(); i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                var stringKeyLength = stringKey.Length;
                switch (stringKeyLength)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
<#= StringKeyFormatterDeserializeHelper.Classify(objInfo.Members, indent) #>
                }
            }

            var ____result = new <#= objInfo.GetConstructorString() #>;
<#
    foreach(var member in objInfo.Members.Where(x => x.IsWritable))
    {#>
            ____result.<#= member.Name #> = __<#= member.Name #>__;
<#
    }
    if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnAfter)
    {#>
            ((IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
<#
    }
    else if(objInfo.HasIMessagePackSerializationCallbackReceiver)
    {#>
            ____result.OnAfterDeserialize();
<#
    }#>
            reader.Depth--;
            return ____result;
        }
    }
<#}#>
}
