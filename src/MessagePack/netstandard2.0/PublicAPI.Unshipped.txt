MessagePack.ExtensionHeader.ExtensionHeader() -> void
MessagePack.ExtensionResult.ExtensionResult() -> void
MessagePack.FormatterNotRegisteredException.FormatterNotRegisteredException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
MessagePack.MessagePackReader.MessagePackReader() -> void
MessagePack.MessagePackSerializerOptions.SequencePool.get -> MessagePack.SequencePool
MessagePack.MessagePackSerializerOptions.WithPool(MessagePack.SequencePool pool) -> MessagePack.MessagePackSerializerOptions
MessagePack.MessagePackStreamReader.MessagePackStreamReader(System.IO.Stream stream, bool leaveOpen, MessagePack.SequencePool sequencePool) -> void
MessagePack.MessagePackStreamReader.ReadArrayHeaderAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
MessagePack.MessagePackStreamReader.ReadMapHeaderAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<int>
MessagePack.MessagePackWriter.MessagePackWriter() -> void
MessagePack.SequencePool
MessagePack.SequencePool.SequencePool() -> void
MessagePack.SequencePool.SequencePool(int maxSize) -> void
MessagePack.SequencePool.SequencePool(int maxSize, System.Buffers.ArrayPool<byte> arrayPool) -> void
MessagePack.TinyJsonException.TinyJsonException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
static MessagePack.Nil.operator !=(MessagePack.Nil left, MessagePack.Nil right) -> bool
static MessagePack.Nil.operator ==(MessagePack.Nil left, MessagePack.Nil right) -> bool
virtual MessagePack.MessagePackStreamReader.Dispose(bool disposing) -> void
MessagePack.Formatters.GenericEnumerableFormatter<TElement, TCollection>
MessagePack.Formatters.GenericEnumerableFormatter<TElement, TCollection>.GenericEnumerableFormatter() -> void
MessagePack.Formatters.GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary>
MessagePack.Formatters.GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary>.GenericReadOnlyDictionaryFormatter() -> void