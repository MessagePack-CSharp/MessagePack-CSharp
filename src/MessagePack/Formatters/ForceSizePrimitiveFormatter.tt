<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(byte), 
        typeof(sbyte),
    };
#>
using System;
using System.Buffers;

namespace MessagePack.Formatters
{
<# foreach(var t in types) {
    string writeSuffix = 
        t.Name == nameof(Byte) ? "UInt8" :
        t.Name == nameof(SByte) ? "Int8" :
        t.Name;
#>
    public sealed class Force<#= t.Name #>BlockFormatter : IMessagePackFormatter<<#= t.Name #>>
    {
        public static readonly Force<#= t.Name #>BlockFormatter Instance = new Force<#= t.Name #>BlockFormatter();

        Force<#= t.Name #>BlockFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #> value, IFormatterResolver resolver)
        {
            writer.Write<#= writeSuffix #>(value);
        }

        public <#= t.Name #> Deserialize(ref MessagePackReader reader, IFormatterResolver resolver)
        {
            return reader.Read<#= t.Name #>();
        }
    }

    public sealed class NullableForce<#= t.Name #>BlockFormatter : IMessagePackFormatter<<#= t.Name #>?>
    {
        public static readonly NullableForce<#= t.Name #>BlockFormatter Instance = new NullableForce<#= t.Name #>BlockFormatter();

        NullableForce<#= t.Name #>BlockFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>? value, IFormatterResolver resolver)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.Write<#= writeSuffix #>(value.Value);
            }
        }

        public <#= t.Name #>? Deserialize(ref MessagePackReader reader, IFormatterResolver resolver)
        {
            if (reader.TryReadNil())
            {
                return default;
            }
            else
            {
                return reader.Read<#= t.Name #>();
            }
        }
    }

<# if(t.Name != "Byte") { #>
    public sealed class Force<#= t.Name #>BlockArrayFormatter : IMessagePackFormatter<<#= t.Name #>[]>
    {
        public static readonly Force<#= t.Name #>BlockArrayFormatter Instance = new Force<#= t.Name #>BlockArrayFormatter();

        Force<#= t.Name #>BlockArrayFormatter()
        {

        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>[] value, IFormatterResolver resolver)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write<#= writeSuffix #>(value[i]);
                }
            }
        }

        public <#= t.Name #>[] Deserialize(ref MessagePackReader reader, IFormatterResolver resolver)
        {
            if (reader.TryReadNil())
            {
                return default;
            }
            else
            {
                var len = reader.ReadArrayHeader();
                var array = new <#= t.Name #>[len];
                for (int i = 0; i < array.Length; i++)
                {
                    array[i] = reader.Read<#= t.Name #>();
                }
                return array;
            }
        }
    }
<# } #>

<# } #>
}
