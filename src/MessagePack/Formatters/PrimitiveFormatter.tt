<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool),
        typeof(byte),
        typeof(sbyte),
        typeof(char),
        typeof(DateTime)
    };
#>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using MessagePack.Internal;

#if NET6_0_OR_GREATER
using System.Runtime.InteropServices;
#endif

#pragma warning disable SA1402 // File may only contain a single type
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{<# foreach(var t in types) {  #>

    public sealed class <#= t.Name #>Formatter : IMessagePackFormatter<<#= t.Name #>>
    {
        public static readonly <#= t.Name #>Formatter Instance = new <#= t.Name #>Formatter();

        private <#= t.Name #>Formatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #> value, MessagePackSerializerOptions options)
        {
            writer.Write(value);
        }

        public <#= t.Name #> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            return reader.Read<#= t.Name #>();
        }
    }

    public sealed class Nullable<#= t.Name #>Formatter : IMessagePackFormatter<<#= t.Name #>?>
    {
        public static readonly Nullable<#= t.Name #>Formatter Instance = new Nullable<#= t.Name #>Formatter();

        private Nullable<#= t.Name #>Formatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.Write(value.Value);
            }
        }

        public <#= t.Name #>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }
            else
            {
                return reader.Read<#= t.Name #>();
            }
        }
    }
<# if(t.Name == "Byte") { #>

#if NET8_0_OR_GREATER
    public sealed class <#= t.Name #>ListFormatter : IMessagePackFormatter<List<<#= t.Name #>>?>
    {
        public static readonly <#= t.Name #>ListFormatter Instance = new <#= t.Name #>ListFormatter();

        private <#= t.Name #>ListFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, List<<#= t.Name #>>? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.Write(CollectionsMarshal.AsSpan(value));
            }
        }

        public List<<#= t.Name #>>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.NextMessagePackType == MessagePackType.Array)
            {
                int len = reader.ReadArrayHeader();
                if (len == 0)
                {
                    return [];
                }

                var list = new List<byte>(len);
                options.Security.DepthStep(ref reader);
                try
                {
                    CollectionsMarshal.SetCount(list, len);
                    var span = CollectionsMarshal.AsSpan(list);
                    for (int i = 0; i < len; i++)
                    {
                        reader.CancellationToken.ThrowIfCancellationRequested();
                        span[i] = reader.ReadByte();
                    }
                }
                finally
                {
                    reader.Depth--;
                }

                return list;
            }
            else
            {
                var sequence = reader.ReadBytes();
                if (sequence == null)
                {
                    return null;
                }

                int len = checked((int)sequence.Value.Length);
                var list = new List<byte>(len);
                CollectionsMarshal.SetCount(list, len);
                var span = CollectionsMarshal.AsSpan(list);
                sequence.Value.CopyTo(span);
                return list;
            }
        }
    }

#endif
<# } #>
<# else if(t.Name == "DateTime") { #>

    public sealed class <#= t.Name #>ArrayFormatter : IMessagePackFormatter<<#= t.Name #>[]?>
    {
        public static readonly <#= t.Name #>ArrayFormatter Instance = new <#= t.Name #>ArrayFormatter();

        private <#= t.Name #>ArrayFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>[]? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Length);
                for (int i = 0; i < value.Length; i++)
                {
                    writer.Write(value[i]);
                }
            }
        }

        public <#= t.Name #>[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }

            var len = reader.ReadArrayHeader();
            if (len == 0)
            {
                return Array.Empty<<#= t.Name #>>();
            }

            var array = new <#= t.Name #>[len];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = reader.Read<#= t.Name #>();
            }

            return array;
        }
    }
<# } #>
<# else if (t.Name == "Boolean") { #>

    public sealed class <#= t.Name #>ArrayFormatter : IMessagePackFormatter<<#= t.Name #>[]?>
    {
        public static readonly <#= t.Name #>ArrayFormatter Instance = new <#= t.Name #>ArrayFormatter();

        private <#= t.Name #>ArrayFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>[]? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Length);
                if (value.Length > 0)
                {
                    writer.CancellationToken.ThrowIfCancellationRequested();
#if NET6_0_OR_GREATER
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref MemoryMarshal.GetArrayDataReference(value), value.Length);
#else
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref value[0], value.Length);
#endif
                }
            }
        }

        public <#= t.Name #>[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }

            var len = reader.ReadArrayHeader();
            if (len == 0)
            {
                return [];
            }

            var array = new <#= t.Name #>[len];
#if NET6_0_OR_GREATER
            ref var output = ref MemoryMarshal.GetArrayDataReference(array);
#else
            ref var output = ref array[0];
#endif

            var inputOffset = 0;
            var sequence = reader.ReadRaw(len);
            foreach (var memory in sequence)
            {
                var inputSpan = memory.Span;
                if (inputSpan.IsEmpty)
                {
                    continue;
                }

#if NET6_0_OR_GREATER
                var errorIndex = UnsafeRefDeserializeHelper.Deserialize(ref MemoryMarshal.GetReference(inputSpan), inputSpan.Length, ref Unsafe.Add(ref output, inputOffset));
#else
                var errorIndex = UnsafeRefDeserializeHelper.Deserialize(ref Unsafe.AsRef(in inputSpan[0]), inputSpan.Length, ref Unsafe.Add(ref output, inputOffset));
#endif
                if (errorIndex >= 0)
                {
                    throw new MessagePackSerializationException($"Unexpected msgpack code {inputSpan[errorIndex]} ({MessagePackCode.ToFormatName(inputSpan[errorIndex])}) at {errorIndex + inputOffset} encountered.");
                }

                inputOffset += inputSpan.Length;
            }

            return array;
        }
    }

#if NET8_0_OR_GREATER
    public sealed class <#= t.Name #>ListFormatter : IMessagePackFormatter<List<<#= t.Name #>>?>
    {
        public static readonly <#= t.Name #>ListFormatter Instance = new <#= t.Name #>ListFormatter();

        private <#= t.Name #>ListFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, List<<#= t.Name #>>? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Count);
                if (value.Count > 0)
                {
                    writer.CancellationToken.ThrowIfCancellationRequested();
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref MemoryMarshal.GetReference(CollectionsMarshal.AsSpan(value)), value.Count);
                }
            }
        }

        public List<<#= t.Name #>>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }

            var len = reader.ReadArrayHeader();
            if (len == 0)
            {
                return [];
            }

            var list = new List<<#= t.Name #>>(len);
            CollectionsMarshal.SetCount(list, len);
            ref var output = ref MemoryMarshal.GetReference(CollectionsMarshal.AsSpan(list));
            var inputOffset = 0;
            var sequence = reader.ReadRaw(len);
            foreach (var memory in sequence)
            {
                var inputSpan = memory.Span;
                if (inputSpan.IsEmpty)
                {
                    continue;
                }

                var errorIndex = UnsafeRefDeserializeHelper.Deserialize(ref MemoryMarshal.GetReference(inputSpan), inputSpan.Length, ref Unsafe.Add(ref output, inputOffset));
                if (errorIndex >= 0)
                {
                    throw new MessagePackSerializationException($"Unexpected msgpack code {inputSpan[errorIndex]} ({MessagePackCode.ToFormatName(inputSpan[errorIndex])}) at {errorIndex + inputOffset} encountered.");
                }

                inputOffset += inputSpan.Length;
            }

            return list;
        }
    }
#endif
<# } #>
<# else { #>

    public sealed class <#= t.Name #>ArrayFormatter : IMessagePackFormatter<<#= t.Name #>[]?>
    {
        public static readonly <#= t.Name #>ArrayFormatter Instance = new <#= t.Name #>ArrayFormatter();

        private <#= t.Name #>ArrayFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, <#= t.Name #>[]? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Length);
                if (value.Length > 0)
                {
                    writer.CancellationToken.ThrowIfCancellationRequested();
#if NET6_0_OR_GREATER
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref MemoryMarshal.GetArrayDataReference(value), value.Length);
#else
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref value[0], value.Length);
#endif
                }
            }
        }

        public <#= t.Name #>[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }

            var len = reader.ReadArrayHeader();
            if (len == 0)
            {
                return Array.Empty<<#= t.Name #>>();
            }

            var array = new <#= t.Name #>[len];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = reader.Read<#= t.Name #>();
            }

            return array;
        }
    }

#if NET8_0_OR_GREATER
    public sealed class <#= t.Name #>ListFormatter : IMessagePackFormatter<List<<#= t.Name #>>?>
    {
        public static readonly <#= t.Name #>ListFormatter Instance = new <#= t.Name #>ListFormatter();

        private <#= t.Name #>ListFormatter()
        {
        }

        public void Serialize(ref MessagePackWriter writer, List<<#= t.Name #>>? value, MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
            }
            else
            {
                writer.WriteArrayHeader(value.Count);
                if (value.Count > 0)
                {
                    writer.CancellationToken.ThrowIfCancellationRequested();
                    UnsafeRefSerializeHelper.Serialize(ref writer, ref MemoryMarshal.GetReference(CollectionsMarshal.AsSpan(value)), value.Count);
                }
            }
        }

        public List<<#= t.Name #>>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return default;
            }

            var len = reader.ReadArrayHeader();
            if (len == 0)
            {
                return [];
            }

            var list = new List<<#= t.Name #>>(len);
            CollectionsMarshal.SetCount(list, len);
            var span = CollectionsMarshal.AsSpan(list);
            for (int i = 0; i < len; i++)
            {
                span[i] = reader.Read<#= t.Name #>();
            }

            return list;
        }
    }
#endif
<# } #>
<# } #>
}
