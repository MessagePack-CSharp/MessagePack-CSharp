<#@ assembly name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using System.Buffers;

namespace MessagePack
{
#pragma warning disable SA1205 // Partial elements should declare access
    ref partial struct MessagePackReader
#pragma warning restore SA1205 // Partial elements should declare access
    {<#
var unsignedTypes = new Type[]
{
    typeof(byte),
    typeof(ushort),
    typeof(uint),
    typeof(ulong),
};
var signedTypes = new Type[]
{
    typeof(sbyte),
    typeof(short),
    typeof(int),
    typeof(long),
};

var allTypes = unsignedTypes.Concat(signedTypes);
foreach (var intType in allTypes) {
#>

        /// <summary>
        /// Reads an <see cref="<#=intType.Name#>"/> value from:
        /// Some value between <see cref="MessagePackCode.MinNegativeFixInt"/> and <see cref="MessagePackCode.MaxNegativeFixInt"/>,
        /// Some value between <see cref="MessagePackCode.MinFixInt"/> and <see cref="MessagePackCode.MaxFixInt"/>,
        /// or any of the other MsgPack integer types.
        /// </summary>
        /// <returns>The value.</returns>
        /// <exception cref="OverflowException">Thrown when the value exceeds what can be stored in the returned type.</exception>
        public <#=intType.Name#> Read<#=intType.Name#>()
        {
            MessagePackPrimitives.ReadResult readResult = MessagePackPrimitives.TryRead(this.reader.UnreadSpan, out <#= intType.Name #> value, out int tokenSize);
retry:
            switch (readResult)
            {
                case MessagePackPrimitives.ReadResult.Success:
                    this.reader.Advance(tokenSize);
                    return value;
                case MessagePackPrimitives.ReadResult.TokenMismatch:
                    throw ThrowInvalidCode(this.reader.UnreadSpan[0]);
                case MessagePackPrimitives.ReadResult.EmptyBuffer:
                case MessagePackPrimitives.ReadResult.InsufficientBuffer:
                    Span<byte> buffer = stackalloc byte[tokenSize];
                    if (this.reader.TryCopyTo(buffer))
                    {
                        readResult = MessagePackPrimitives.TryRead(buffer, out value, out tokenSize);
                        goto retry;
                    }
                    else
                    {
                        throw ThrowNotEnoughBytesException();
                    }

                default:
                    throw ThrowUnreachable();
            }
        }
<# } #>
    }
}
