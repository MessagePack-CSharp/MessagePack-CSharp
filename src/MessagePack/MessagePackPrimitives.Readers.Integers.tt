<#@ assembly name="System.Core" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;
using System.Buffers;

#pragma warning disable SA1205 // Partial elements should declare access

namespace MessagePack;

partial class MessagePackPrimitives
{
    static partial class Decoders
    {<# foreach (string bigValueType in new[] { "Int64", "UInt64" }) { #>

        private class Read<#=bigValueType#>Invalid : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>Invalid Instance = new();

            private Read<#=bigValueType#>Invalid()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                value = 0;
                tokenSize = 1;
                return DecodeResult.TokenMismatch;
            }
        }

        private class Read<#=bigValueType#>FixInt : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>FixInt Instance = new();

            private Read<#=bigValueType#>FixInt()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 1;
                value = source[0];
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>NegativeFixInt : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>NegativeFixInt Instance = new();

            private Read<#=bigValueType#>NegativeFixInt()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 1;
                value = checked((<#=bigValueType#>)unchecked((sbyte)source[0]));
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>UInt8 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>UInt8 Instance = new();

            private Read<#=bigValueType#>UInt8()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 2;
                if (source.Length < tokenSize)
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = source[1];
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>UInt16 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>UInt16 Instance = new();

            private Read<#=bigValueType#>UInt16()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 3;
                if (!TryReadBigEndian(source.Slice(1), out ushort ushortResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = ushortResult;
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>UInt32 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>UInt32 Instance = new();

            private Read<#=bigValueType#>UInt32()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 5;
                if (!TryReadBigEndian(source.Slice(1), out uint uintResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = uintResult;
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>UInt64 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>UInt64 Instance = new();

            private Read<#=bigValueType#>UInt64()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 9;
                if (!TryReadBigEndian(source.Slice(1), out ulong ulongResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = checked((<#=bigValueType#>)ulongResult);
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>Int8 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>Int8 Instance = new();

            private Read<#=bigValueType#>Int8()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 2;
                if (source.Length < tokenSize)
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = checked((<#=bigValueType#>)unchecked((sbyte)source[1]));
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>Int16 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>Int16 Instance = new();

            private Read<#=bigValueType#>Int16()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 3;
                if (!TryReadBigEndian(source.Slice(1), out short shortResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = checked((<#=bigValueType#>)shortResult);
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>Int32 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>Int32 Instance = new();

            private Read<#=bigValueType#>Int32()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 5;
                if (!TryReadBigEndian(source.Slice(1), out int intResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = checked((<#=bigValueType#>)intResult);
                return DecodeResult.Success;
            }
        }

        private class Read<#=bigValueType#>Int64 : IRead<#=bigValueType#>
        {
            internal static readonly Read<#=bigValueType#>Int64 Instance = new();

            private Read<#=bigValueType#>Int64()
            {
            }

            public DecodeResult Read(ReadOnlySpan<byte> source, out <#=bigValueType#> value, out int tokenSize)
            {
                tokenSize = 9;
                if (!TryReadBigEndian(source.Slice(1), out long longResult))
                {
                    value = 0;
                    return DecodeResult.InsufficientBuffer;
                }

                value = checked((<#=bigValueType#>)longResult);
                return DecodeResult.Success;
            }
        }
<# } #>
    }
<#
IEnumerable<string> signedTypes = new Type[] { typeof(sbyte), typeof(short), typeof(int), typeof(long) }.Select(t => t.Name);
IEnumerable<string> unsignedTypes = new Type[] { typeof(byte), typeof(ushort), typeof(uint), typeof(ulong) }.Select(t => t.Name);
IEnumerable<(string Name, bool Signed)> allTypes = unsignedTypes.Select(n => (n, false)).Concat(signedTypes.Select(n => (n, true)));
foreach (var intType in allTypes) {
    string jumpTable = intType.Signed ? "Int64JumpTable" : "UInt64JumpTable";
    string bigValueType = intType.Signed ? "long" : "ulong";
#>

    /// <summary>
    /// Tries to read an <see cref="<#=intType.Name#>"/> value from:
    /// Some value between <see cref="MessagePackCode.MinNegativeFixInt"/> and <see cref="MessagePackCode.MaxNegativeFixInt"/>,
    /// Some value between <see cref="MessagePackCode.MinFixInt"/> and <see cref="MessagePackCode.MaxFixInt"/>,
    /// or any of the other MsgPack integer types.
    /// </summary>
    /// <returns>The value.</returns>
    /// <exception cref="OverflowException">Thrown when the value exceeds what can be stored in the returned type.</exception>
    public static DecodeResult TryRead<#=intType.Name#>(ReadOnlySpan<byte> source, out <#=intType.Name#> value, out int tokenSize)
    {
        if (source.Length > 0)
        {
            DecodeResult result = Decoders.<#=jumpTable#>[source[0]].Read(source, out <#=bigValueType#> longValue, out tokenSize);
            value = checked((<#=intType.Name#>)longValue);
            return result;
        }
        else
        {
            tokenSize = 1;
            value = 0;
            return DecodeResult.EmptyBuffer;
        }
    }
<# }
var floatingPointTypes = new Type[] { typeof(float), typeof(double) }.Select(t => t.Name);
foreach (var floatType in floatingPointTypes) { #>

    /// <summary>
    /// Tries to read an <see cref="<#=floatType#>"/> value from a <see cref="MessagePackCode.Float64"/> or <see cref="MessagePackCode.Float32"/>
    /// or any of the integer types.
    /// </summary>
    /// <returns>The value.</returns>
    /// <exception cref="OverflowException">Thrown when the value exceeds what can be stored in the returned type.</exception>
    public static unsafe DecodeResult TryRead<#=floatType#>(ReadOnlySpan<byte> source, out <#=floatType#> value, out int tokenSize)
    {
        tokenSize = 1;
        if (source.Length < 1)
        {
            value = default;
            return DecodeResult.EmptyBuffer;
        }

        switch (source[0])
        {
            case MessagePackCode.Float32:
                tokenSize = 5;
                if (source.Length < tokenSize)
                {
                    value = default;
                    return DecodeResult.InsufficientBuffer;
                }

                AssumesTrue(TryReadBigEndian(source.Slice(1), out uint uintValue));
                value = *(float*)&uintValue;
                return DecodeResult.Success;
            case MessagePackCode.Float64:
                tokenSize = 9;
                if (source.Length < tokenSize)
                {
                    value = default;
                    return DecodeResult.InsufficientBuffer;
                }

                AssumesTrue(TryReadBigEndian(source.Slice(1), out ulong ulongValue));
                value = (<#=floatType#>)(*(double*)&ulongValue);
                return DecodeResult.Success;
            case MessagePackCode.Int8 or MessagePackCode.Int16 or MessagePackCode.Int32 or MessagePackCode.Int64:
            case >= MessagePackCode.MinNegativeFixInt and <= MessagePackCode.MaxNegativeFixInt:
                DecodeResult result = TryReadInt64(source, out long longValue, out tokenSize);
                value = longValue;
                return result;
            case MessagePackCode.UInt8 or MessagePackCode.UInt16 or MessagePackCode.UInt32 or MessagePackCode.UInt64:
            case >= MessagePackCode.MinFixInt and <= MessagePackCode.MaxFixInt:
                result = TryReadUInt64(source, out ulongValue, out tokenSize);
                value = ulongValue;
                return result;
            default:
                value = default;
                return DecodeResult.TokenMismatch;
        }
    }
<# } #>
}
