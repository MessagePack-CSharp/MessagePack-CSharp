<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace <#= Namespace #>
{
    using System;
	using System.Buffers;
    using MessagePack;

<# foreach(var objInfo in objectSerializationInfos) { #>

    public sealed class <#= objInfo.Name #>Formatter : global::MessagePack.Formatters.IMessagePackFormatter<<#= objInfo.FullName #>>
    {
<# if( objInfo.IsStringKey) { #>

        readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        readonly byte[][] ____stringByteKeys;

        public <#= objInfo.Name #>Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
<# foreach(var x in objInfo.Members) { #>
                { "<#= x.StringKey #>", <#= x.IntKey #>},
<# } #>
            };

            this.____stringByteKeys = new byte[][]
            {
<# foreach(var x in objInfo.Members.Where(x => x.IsReadable)) { #>
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("<#= x.StringKey #>"),
<# } #>
            };
        }

<# } #>

        public void Serialize(ref MessagePackWriter writer, <#= objInfo.FullName #> value, global::MessagePack.IFormatterResolver formatterResolver)
        {
<# if( objInfo.IsClass) { #>
            if (value == null)
            {
                writer.WriteNil();
                return;
            }
<# } #>
<#if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnBefore) { #>
            ((IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
<# } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { #>
            value.OnBeforeSerialize();
<# } #>
<# if( objInfo.IsIntKey) { if( (objInfo.MaxKey + 1) <= 15) { #>
            writer.WriteFixedArrayHeaderUnsafe(<#= objInfo.MaxKey + 1 #>);
<# } else { #>
            writer.WriteArrayHeader(<#= objInfo.MaxKey + 1 #>);
<# } } else { #>
            writer.WriteMapHeader(<#= objInfo.WriteCount #>);
<# } #>
<# if(objInfo.IsIntKey) { #>
<# for(var i =0; i<= objInfo.MaxKey; i++) { var member = objInfo.GetMember(i); #>
<# if( member == null) { #>
            writer.WriteNil();
<# } else { #>
            <#= member.GetSerializeMethodString() #>;
<# } } } else { #>
<# var index = 0; foreach(var x in objInfo.Members) { #>
            writer.WriteRaw(this.____stringByteKeys[<#= index++ #>]);
            <#= x.GetSerializeMethodString() #>;
<# } } #>
        }

        public <#= objInfo.FullName #> Deserialize(ref MessagePackReader reader, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (reader.TryReadNil())
            {
<# if( objInfo.IsClass) { #>
                return null;
<# } else { #>
                throw new InvalidOperationException("typecode is null, struct not supported");
<# } #>
            }

<# if(objInfo.IsStringKey) { #>
            var length = reader.ReadMapHeader();
<# } else { #>
            var length = reader.ReadArrayHeader();
<# } #>

<# foreach(var x in objInfo.Members) { #>
            var __<#= x.Name #>__ = default(<#= x.Type #>);
<# } #>

            for (int i = 0; i < length; i++)
            {
<# if(objInfo.IsStringKey) { #>
                var stringKey = reader.ReadStringSegment();
                int key;
                if (!____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }
<# } else { #>
                var key = i;
<# } #>

                switch (key)
                {
<# foreach(var x in objInfo.Members) { #>
                    case <#= x.IntKey #>:
                        __<#= x.Name #>__ = <#= x.GetDeserializeMethodString() #>;
                        break;
<# } #>
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new <#= objInfo.GetConstructorString()  #>;
<# foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { #>
            ____result.<#= x.Name #> = __<#= x.Name #>__;
<# } #>
<#if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnAfter) { #>
            ((IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
<# } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { #>
            ____result.OnAfterDeserialize();
<# } #>
            return ____result;
        }
    }

<# } #>
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612
