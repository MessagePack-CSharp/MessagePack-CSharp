<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MessagePack.SourceGenerator.CodeAnalysis" #>

using MsgPack = global::MessagePack;

<# var list = new List<ValueTuple<MemberSerializationInfo, byte[]>>();
	foreach (var member in Info.Members) {
		var binary = EmbedStringHelper.Utf8.GetBytes(member.StringKey);
		list.Add(new ValueTuple<MemberSerializationInfo, byte[]>(member, binary));
	}

	bool isFormatterResolverNecessary = GeneratorUtilities.ShouldUseFormatterResolver(Info.Members); #>
<# using (this.EmitNestingTypesAndNamespaces(this.Write)) { #>
	internal sealed class <#= Info.Formatter.GetQualifiedName(Qualifiers.None) #> : global::MessagePack.Formatters.IMessagePackFormatter<<#= Info.DataType.GetQualifiedName() #>>
<# TransformUtilities.EmitTypeConstraints(Info.Formatter, this.Write); #>
	{
<# foreach (var item in Info.Members) { #>
<# if (item.CustomFormatter != null) { #>
		private readonly <#= item.CustomFormatter.Name.GetQualifiedName() #> __<#= item.Name #>CustomFormatter__ = <#= item.CustomFormatter.InstanceExpression #>;
<# } #>
<# } #>
<# for (var i = 0; i < list.Count; i++) {
		var member = list[i].Item1;
		var binary = list[i].Item2; #>
		// <#= member.StringKey #>
		private static global::System.ReadOnlySpan<byte> GetSpan_<#= member.UniqueIdentifier #>() => <#= EmbedStringHelper.ToByteArrayString(binary) #>;
<# } #>
<# if (list.Count != 0) { #>

<# } #>
		public void Serialize(ref global::MessagePack.MessagePackWriter writer, <#= Info.DataType.GetQualifiedName() #> value, global::MessagePack.MessagePackSerializerOptions options)
		{
<# if (Info.IsClass) { #>
			if (value is null)
			{
				writer.WriteNil();
				return;
			}

<# }

	if (isFormatterResolverNecessary) { #>
			var formatterResolver = options.Resolver;
<# }

	if (Info.HasIMessagePackSerializationCallbackReceiver) {
		if (Info.NeedsCastOnBefore) { #>
			((global::MessagePack.IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize();
<# } else { #>
			value.OnBeforeSerialize();
<# } #>
<# } #>
			writer.WriteMapHeader(<#= list.Count #>);
<# foreach (var memberAndBinary in list) {
		var member = memberAndBinary.Item1; #>
			writer.WriteRaw(GetSpan_<#= member.UniqueIdentifier #>());
			<#= member.GetSerializeMethodString() #>;
<# } #>
		}

		public <#= Info.DataType.GetQualifiedName() #> Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil())
			{
<# if (Info.IsClass) { #>
				return null;
<# } else { #>
				throw new global::System.InvalidOperationException("typecode is null, struct not supported");
<# } #>
			}

<# if (Info.Members.Length == 0) { #>
			reader.Skip();
			var ____result = new <#= Info.GetConstructorString() #>;
<# } else { #>
			options.Security.DepthStep(ref reader);
<# if (isFormatterResolverNecessary) { #>
			var formatterResolver = options.Resolver;
<# } #>
			var length = reader.ReadMapHeader();
<# if (Info.MustDeserializeFieldsFirst) {
	foreach (var member in Info.Members.Where(x => x.IsWritable || Info.ConstructorParameters.Any(p => p.Equals(x)))) {
		// Until C# allows for optionally setting init-only properties (https://github.com/dotnet/csharplang/issues/6117)
		// we will unconditionally set them, and thus have no reason to track whether the local variable has been initialized.
		if (!member.IsInitOnly && !member.IsRequired && !Info.ConstructorParameters.Any(p => p.Equals(member))) { #>
			var <#= member.LocalVariableName #>IsInitialized = false;
<#		} #>
			var <#= member.LocalVariableName #> = default(<#= member.Type #>);
<#	} #>
<# } else { #>
			var ____result = new <#= Info.GetConstructorString() #>;
<# } #>

			for (int i = 0; i < length; i++)
			{
				var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
				switch (stringKey.Length)
				{
					default:
					FAIL:
					  reader.Skip();
					  continue;
<#= StringKeyFormatterDeserializeHelper.Classify(Info, "					", !Info.MustDeserializeFieldsFirst) #>
				}
			}

<# if (Info.MustDeserializeFieldsFirst) { #>
			var ____result = new <#= Info.GetConstructorString() #>;
<# foreach (var member in Info.Members.Where(x => x.IsWritable && !x.IsInitOnly && !x.IsRequired && !Info.ConstructorParameters.Any(p => p.Equals(x)))) { #>
			if (<#= member.LocalVariableName #>IsInitialized)
			{
				<#= member.GetMemberAccess("____result") #> = <#= member.LocalVariableName #>;
			}

<# } #>
<# } #>
<# } #>
<# if (Info.HasIMessagePackSerializationCallbackReceiver) {
		if (Info.NeedsCastOnAfter) { #>
			((global::MessagePack.IMessagePackSerializationCallbackReceiver)____result).OnAfterDeserialize();
<# } else { #>
			____result.OnAfterDeserialize();
<# } #>
<# } #>
<# if (Info.Members.Length != 0) { #>
			reader.Depth--;
<# } #>
			return ____result;
		}
	}

<# } #>
