<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# if (ResolverNamespace.Length > 0) { #>
namespace <#= ResolverNamespace #> {
<# } #>

using MsgPack = global::MessagePack;

partial class <#= ResolverName #>
{
<# using (this.EmitClassesForNamespace(out string classVisibility, this.Write)) { #>
	<#= classVisibility #> sealed class <#= Info.Name #>Formatter : MsgPack::Formatters.IMessagePackFormatter<<#= Info.FullName #>>
	{
		private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
		private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

		public <#= Info.Name #>Formatter()
		{
			this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(<#= Info.SubTypes.Length #>, MsgPack::Internal.RuntimeTypeHandleEqualityComparer.Default)
			{
<# for(var i = 0; i < Info.SubTypes.Length; i++) { var item = Info.SubTypes[i]; #>
				{ typeof(<#= item.Type #>).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(<#= item.Key #>, <#= i #>) },
<# } #>
			};
			this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(<#= Info.SubTypes.Length #>)
			{
<# for(var i = 0; i < Info.SubTypes.Length; i++) { var item = Info.SubTypes[i]; #>
				{ <#= item.Key #>, <#= i #> },
<# } #>
			};
		}

		public void Serialize(ref MsgPack::MessagePackWriter writer, <#= Info.FullName #> value, MsgPack::MessagePackSerializerOptions options)
		{
			global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
			if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
			{
				writer.WriteArrayHeader(2);
				writer.WriteInt32(keyValuePair.Key);
				switch (keyValuePair.Value)
				{
<# for(var i = 0; i < Info.SubTypes.Length; i++) { var item = Info.SubTypes[i]; #>
					case <#= i #>:
						MsgPack::FormatterResolverExtensions.GetFormatterWithVerify<<#= item.Type #>>(options.Resolver).Serialize(ref writer, (<#= item.Type #>)value, options);
						break;
<# } #>
					default:
						break;
				}

				return;
			}

			writer.WriteNil();
		}

		public <#= Info.FullName #> Deserialize(ref MsgPack::MessagePackReader reader, MsgPack::MessagePackSerializerOptions options)
		{
			if (reader.TryReadNil())
			{
				return null;
			}

			if (reader.ReadArrayHeader() != 2)
			{
				throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:<#= Info.FullName #>");
			}

			options.Security.DepthStep(ref reader);
			var key = reader.ReadInt32();

			if (!this.keyToJumpMap.TryGetValue(key, out key))
			{
				key = -1;
			}

			<#= Info.FullName #> result = null;
			switch (key)
			{
<# for(var i = 0; i < Info.SubTypes.Length; i++) { var item = Info.SubTypes[i]; #>
				case <#= i #>:
					result = (<#= Info.FullName #>)MsgPack::FormatterResolverExtensions.GetFormatterWithVerify<<#= item.Type #>>(options.Resolver).Deserialize(ref reader, options);
					break;
<# } #>
				default:
					reader.Skip();
					break;
			}

			reader.Depth--;
			return result;
		}
	}
<# } // close EmitClassesForNamespace #>
}

<# if (ResolverNamespace.Length > 0) { #>
}
<# } #>
